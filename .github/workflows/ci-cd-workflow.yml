name: CI/CD Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  validate-wrapper:
    name: Validate Gradle wrapper
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1.0.4

  assemble:
    name: Assemble JAR
    needs: validate-wrapper
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2.3.1
        with:
          cache: gradle
          distribution: adopt
          java-version: 11

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAVEN_USERNAME }}
          aws-secret-access-key: ${{ secrets.AWS_MAVEN_PASSWORD }}
          aws-region: eu-west-1

      - name: Add CodeArtifact env var
        run: echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain hee --domain-owner 430723991443 --query authorizationToken --output text)" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew assemble

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-jar
          path: build/libs/*.jar

  check:
    name: Perform checks
    needs: validate-wrapper
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2.3.1
        with:
          cache: gradle
          distribution: adopt
          java-version: 11

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAVEN_USERNAME }}
          aws-secret-access-key: ${{ secrets.AWS_MAVEN_PASSWORD }}
          aws-region: eu-west-1

      - name: Add CodeArtifact env var
        run: echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain hee --domain-owner 430723991443 --query authorizationToken --output text)" >> $GITHUB_ENV

      - name: Run Gradle checks
        run: ./gradlew check -x test

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: build/reports

  test:
    name: Run automated tests
    needs: validate-wrapper
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2.3.1
        with:
          cache: gradle
          distribution: adopt
          java-version: 11

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAVEN_USERNAME }}
          aws-secret-access-key: ${{ secrets.AWS_MAVEN_PASSWORD }}
          aws-region: eu-west-1

      - name: Add CodeArtifact env var
        run: echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain hee --domain-owner 430723991443 --query authorizationToken --output text)" >> $GITHUB_ENV

      - name: Run Gradle tests
        run: ./gradlew test --info

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: build/reports

  analyze:
    name: Perform quality analysis
    needs: [check, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: reports
          path: build/reports

      - name: Set up JDK
        uses: actions/setup-java@v2.3.1
        with:
          cache: gradle
          distribution: adopt
          java-version: 11

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAVEN_USERNAME }}
          aws-secret-access-key: ${{ secrets.AWS_MAVEN_PASSWORD }}
          aws-region: eu-west-1

      - name: Add CodeArtifact env var
        run: echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain hee --domain-owner 430723991443 --query authorizationToken --output text)" >> $GITHUB_ENV

      - name: Run quality analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube

  backup-artifacts:
    name: Backup build artifacts
    needs: [assemble, check, test]
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: build-artifacts

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Backup build artifacts
        run: |
          workflow=$(echo ${{ github.workflow }} | sed -e 's/\W/-/g' -e 's/\(.*\)/\L\1/')
          aws s3 sync build-artifacts s3://tis-build-artifacts/${{ github.event.repository.name }}/$workflow/${{ github.run_number }}

  dockerize:
    name: Dockerize
    needs: [assemble, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: build/libs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
        run: |
          ./gradlew bootBuildImage -x bootJar --imageName=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

  deploy-preprod:
    name: Deploy to pre-production
    needs: dockerize
    environment: preprod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-pre-prod.json
          container-name: ${{ github.event.repository.name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ github.sha }}

      - name: Deploy Amazon ECS task definition to preprod
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ github.event.repository.name }}
          cluster: revalidation-preprod
          wait-for-service-stability: true

      - name: Push stable tag image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:stable
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

  deploy-prod:
    name: Deploy to Production
    needs: deploy-preprod
    environment: prod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition-prod.json
          container-name: ${{ github.event.repository.name }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:stable

      - name: Deploy Amazon ECS task definition to prod
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ github.event.repository.name }}
          cluster: revalidation-prod
          wait-for-service-stability: true
